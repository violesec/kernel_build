# Nyahahaha
name: Build Kernel (Azure-Clang)

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      custom:
        description: 'Run custom script'
        required: false
        default: 'false'
      kernelsu:
        description: 'Compile KernelSU'
        required: false
        default: 'false'

env:
  UPLOAD_BIN_DIR: true
  UPLOAD_RELEASE: true
  REPO_URL: https://github.com/Viole403/android_kernel_xiaomi_mt6768.git
  REPO_BRANCH: suisei
  TOOLCHAIN_URL: https://gitlab.com/Panchajanya1999/azure-clang.git
  TOOLCHAIN_BRANCH: main
  CONFIG_FILE: .config
  EXTERNAL_URL: https://github.com/violesec/kernel_build.git
  ANYKERNEL_URL: https://github.com/violesec/anykernel-lance.git
  ANYKERNEL_BRANCH: main
  TZ: Asia/Jakarta
  ARCH: arm64
  SUBARCH: arm64
  DEVICE: lancelot
  DEVICE_DEFCONFIG: lancelot_defconfig
  USE_KERNELSU: true
  USE_KPROBES: false
  USE_OVERLAYFS: false
  USE_CCACHE: 1
  CCACHE_DIR: ~/.ccache
  BUILDER: /workdir/toolchain/bin/
  
jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        #sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
        sudo -E apt-get install -y bc bison build-essential binutils-dev ca-certificates ccache cmake curl flex file g++-multilib git gnupg gperf imagemagick lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libsdl1.2-dev libssl-dev libwxgtk3.0-gtk3-dev libc6-i386 libxml2 libxml2-utils lld lzop ninja-build pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev unzip openjdk-8-jdk language-pack-zh-hans texinfo python python3.7 vim u-boot-tools xz-utils zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%d-%m-%Y')"

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $EXTERNAL_URL extra
        git clone $ANYKERNEL_URL anykernel
        rm -rf ./anykernel/.github && rm -rf ./anykernel/README.md && rm -rf ./anykernel/.git && rm -rf ./anykernel/anykernel.sh
        git clone --recurse-submodules --depth=1 $REPO_URL -b $REPO_BRANCH kernel
        git clone --depth=1 $TOOLCHAIN_URL -b $TOOLCHAIN_BRANCH toolchain
        cp ./extra/compile.sh ./kernel/
        cp ./extra/anykernel.sh ./anykernel/
        ln -sf /workdir/kernel $GITHUB_WORKSPACE/kernel

    - name: Set Cache
      working-directory: /workdir/kernel
      run: |
        ccache -M 15G
        
    - name: Patch KernelSU (${{github.event.inputs.kernelsu}})
      working-directory: /workdir/kernel
      if: (github.event.inputs.kernelsu == 'true' && github.event.inputs.kernelsu  != 'false') || contains(github.event.action, 'kernelsu')
      run: |
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
        if [ ${{ env.USE_KPROBES }} = true ]; then
            echo "CONFIG_MODULES=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            echo "CONFIG_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            echo "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            echo "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
        fi
        if [ ${{ env.USE_OVERLAYFS }} = true ]; then
            echo "CONFIG_OVERLAY_FS=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
        fi
        if [ ${{ env.DISABLE-LTO }} = true ]; then
            sed -i 's/CONFIG_LTO=y/CONFIG_LTO=n/' arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            sed -i 's/CONFIG_LTO_CLANG=y/CONFIG_LTO_CLANG=n/' arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            sed -i 's/CONFIG_THINLTO=y/CONFIG_THINLTO=n/' arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
            echo "CONFIG_LTO_NONE=y" >> arch/${{ env.ARCH }}/configs/${{ env.DEVICE_DEFCONFIG }}
        fi
        
    - name: Kernel Custom Script (${{github.event.inputs.custom}})
      working-directory: /workdir
      if: (github.event.inputs.custom == 'true' && github.event.inputs.custom  != 'false') || contains(github.event.action, 'custom')
      run: |
        cp ./extra/custom.sh ./kernel/
        chmod +x ./kernel/custom.sh
        bash ./kernel/custom.sh
        
    - name: SSH connection to Actions (${{github.event.inputs.ssh}})
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')

    - name: Set Device
      working-directory: /workdir/kernel
      run: |
        make O=out ARCH=$ARCH $DEVICE_DEFCONFIG

    - name: Compile Source
      working-directory: /workdir/kernel
      run: |
        chmod +x ./compile.sh
        bash ./compile.sh
        ls /workdir/kernel/out/arch/arm64/boot/

    - name: Env Preperation
      run: |
        # TZ='${{ env.TZ }}' date +''%d/%m/%y'
        make kernelversion
        echo "KERNEL_VERSION=$(make kernelversion | head -n 1)"" >> $GITHUB_ENV
        echo "CLANG_VERSION="$(clang --version | head -n 1)"" >> $GITHUB_ENV
        echo "KERNEL_NAME="$(cat arch/arm64/configs/${{ env.DEVICE }}_defconfig | grep "CONFIG_LOCALVERSION\=" | sed -r 's/.*"(.+)".*/\1/' | sed 's/^.//')"" >> $GITHUB_ENV

    - name: Pack Kernel
      # working-directory: /workdir
      run: |
        # cp /workdir/kernel/out/arch/arm64/boot/Image.gz-dtb ./anykernel/
        if [[ -f out/arch/arm64/boot/Image.gz-dtb ]]; then
          cp out/arch/arm64/boot/Image.gz-dtb ./anykernel/Image.gz-dtb
        elif [[ -f out/arch/arm64/boot/Image-dtb ]]; then
          cp out/arch/arm64/boot/Image-dtb ./anykernel/Image-dtb
        elif [[ -f out/arch/arm64/boot/Image.gz ]]; then
          cp out/arch/arm64/boot/Image.gz ./anykernel/Image.gz
        elif [[ -f out/arch/arm64/boot/Image ]]; then
          cp out/arch/arm64/boot/Image ./anykernel/Image
        fi
        if [ -f out/arch/arm64/boot/dtbo.img ]; then
          cp out/arch/arm64/boot/dtbo.img ./anykernel/dtbo.img
        fi
        
    - name: Upload Kernel directory
      uses: actions/upload-artifact@main
      with:
        working-directory: /workdir/kernel
        name: Nimow_Kernel_${{ env.DEVICE }}_Boot
        path: /workdir/kernel/out/arch/arm64/boot/
        
    - name: Upload Kernel Patcher
      uses: actions/upload-artifact@main
      with:
        working-directory: /workdir
        name: [${{ steps.date.outputs.date }}]Nimow_Kernel_${{ env.DEVICE }}-${{ github.sha }}
        path: /workdir/anykernel/
